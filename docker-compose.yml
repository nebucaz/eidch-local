services:
  postgres-cloak:
    image: postgres:15.8
    volumes:
      - postgres_kloak_data:/var/lib/postgresql/data
    hostname: keykloak_db
    environment:
      POSTGRES_USER: "keycloak"
      POSTGRES_PASSWORD: "secret"
      POSTGRES_DB: "keycloak_db"
  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    hostname: keycloak
    depends_on:
      - postgres-cloak
    environment:
      KC_HOSTNAME: keycloak
      KC_HOSTNAME_PORT: 7080
      KC_HOSTNAME_STRICT: false  # Allows requests from different hostnames
      KC_HTTP_ENABLED: true
      KC_PROXY: none  # Use "edge" if behind a reverse proxy
      KC_HOSTNAME_STRICT_BACKCHANNEL: "true"
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: "true"
      KC_LOG_LEVEL: info
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keykloak_db/keycloak_db
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: secret
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7080/health/ready"]
      interval: 15s
      timeout: 2s
      retries: 15
    command: ["start-dev", "--http-port", "7080", "--https-port", "7443"]
    ports:
      - '7080:7080'
  postgres-registry:
    image: postgres:15.8
    volumes:
      - postgres_registry_data:/var/lib/postgresql/data
      - ./init/init-registry.sql:/docker-entrypoint-initdb.d/init.sql
    hostname: base-registry-db
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "secret"
    ports:
      - '5180:5432'


  eidch-registry-base-data:
    build:
      context: .
      dockerfile: ./Docker/eidch-registry-base-data/Dockerfile
    image: eidch-registry-base-data
    hostname: eidch-registry-base-data
    ports:
      - '8190:8190'
    command: java -jar -Dspring.config.additional-location=application-compose.yml base-registry-data-service-0.0.6-SNAPSHOT.jar --spring.profiles.active=compose
    depends_on:
      - postgres-registry
  eidch-registry-base-authoring:
    build:
      context: .
      dockerfile: ./Docker/eidch-registry-base-authoring/Dockerfile
    image: eidch-registry-base-authoring
    hostname: eidch-registry-base-authoring
    ports:
      - '8180:8180'
    command: java -jar -Dspring.config.additional-location=application-compose.yml registry-base-authoring-0.0.6-SNAPSHOT.jar --spring.profiles.active=compose
    depends_on:
      - postgres-registry
    #environment:
    #  SECURITY_OAUTH2_JWT_ISSUERURIS_KLOAK: "http://localhost:7080/realms/master"
  eidch-registry-status-data:
    build:
      context: .
      dockerfile: ./Docker/eidch-registry-status-data/Dockerfile
    image: eidch-registry-status-data
    hostname: eidch-registry-status-data
    ports:
      - '8290:8290'
    command: java -jar -Dspring.config.additional-location=application-compose.yml registry-status-data-0.0.6-SNAPSHOT.jar --spring.profiles.active=compose
    depends_on:
      - postgres-registry
  eidch-registry-status-authoring:
    build:
      context: .
      dockerfile: ./Docker/eidch-registry-status-authoring/Dockerfile
    image: eidch-registry-status-authoring
    hostname: eidch-registry-status-authoring
    ports:
      - '8280:8280'
    command: java -jar -Dspring.config.additional-location=application-compose.yml registry-status-authoring-0.0.6-SNAPSHOT.jar --spring.profiles.active=compose
    depends_on:
      - postgres-registry
    #environment:
      #SECURITY_OAUTH2_JWT_ISSUERURIS_KLOAK: "http://localhost:7080/realms/master"
  # postgres-trust:
  #   image: postgres:15.8
  #   volumes:
  #     - postgres_trust_data:/var/lib/postgresql/data
  #   hostname: trust-registry-db
  #   environment:
  #     POSTGRES_USER: "postgres"
  #     POSTGRES_PASSWORD: "secret"
  #     POSTGRES_DB: "trust-registry-db"
  #   ports:
  #     - '5182:5432'
  eidch-registry-trust-data:
    build:
      context: .
      dockerfile: ./Docker/eidch-registry-trust-data/Dockerfile
    image: eidch-registry-trust-data
    hostname: eidch-registry-trust-data
    ports:
      - '8390:8390'
    command: java -jar -Dspring.config.additional-location=application-compose.yml registry-trust-data-0.0.6-SNAPSHOT.jar --spring.profiles.active=compose
    depends_on:
      - postgres-registry
  eidch-registry-trust-authoring:
    build:
      context: .
      dockerfile: ./Docker/eidch-registry-trust-authoring/Dockerfile
    image: eidch-registry-trust-authoring
    hostname: eidch-registry-trust-authoring
    ports:
      - '8380:8380'
    command: java -jar -Dspring.config.additional-location=application-compose.yml registry-trust-authoring-0.1.1-SNAPSHOT.jar --spring.profiles.active=compose
    depends_on:
      - postgres-registry
    #environment:
      #SECURITY_OAUTH2_JWT_ISSUERURIS_KLOAK: "http://localhost:7080/realms/master"
  postgres-issuer:
    image: postgres:15.8
    volumes:
      - postgres_issuer_data:/var/lib/postgresql/data
      - ./init/init-issuer.sql:/docker-entrypoint-initdb.d/init.sql
    hostname: issuer-db
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "secret"
    ports:
      - '5183:5432'
  eidch-issuer-agent-management:
    image: eidch-issuer-agent-management
    build:
      context: .
      dockerfile: ./Docker/eidch-issuer-agent-management/Dockerfile
    ports:
      - '8080:8080'
    depends_on:
      - postgres-issuer
    environment:
      EXTERNAL_URL: "https:<url of your own issuer-agent-oid4vci service>"
      SPRING_APPLICATION_NAME: "<custom name of the application>"
      ISSUER_ID: "<Your ISSUER_ID>" #e.g did:tdw:QmejrSkusQgeM6FfA23L6NPoLy3N8aaiV6X5Ysvb47WSj8:identifier-reg-r.trust-infra.swiyu.admin.ch:api:v1:did:ff8eb859-6996-4e51-a976-be1ca584c124
      DID_STATUS_LIST_VERIFICATION_METHOD: "<Your ISSUER_DID>#assert-key-01"
      STATUS_LIST_KEY: |
        -----BEGIN EC PRIVATE KEY-----
        <private key of the file "assert-key-01">
        -----END EC PRIVATE KEY-----
      SWIYU_PARTNER_ID: "<Your SWIYU_PARTNER_ID>"
      SWIYU_STATUS_REGISTRY_CUSTOMER_KEY: "<Your SWIYU_STATUS_REGISTRY_CUSTOMER_KEY>"
      SWIYU_STATUS_REGISTRY_CUSTOMER_SECRET: "<Your SWIYU_STATUS_REGISTRY_CUSTOMER_SECRET>"
      SWIYU_STATUS_REGISTRY_BOOTSTRAP_REFRESH_TOKEN: "<Your SWIYU_STATUS_REGISTRY_BOOTSTRAP_REFRESH_TOKEN>"

      # Environment specific values. Please consult the main manual
      SWIYU_STATUS_REGISTRY_TOKEN_URL: "https://<KEY_MANAGER for the env>/keycloak/realms/APIGW/protocol/openid-connect/token" #e.g. https://keymanager-npr-intra.api.admin.ch
      SWIYU_STATUS_REGISTRY_API_URL: "<SWIYU_STATUS_REGISTRY_API_URL>" #e.g. https://status-reg-api-r.trust-infra.swiyu.admin.ch

      # Default settings for the application. Only change these if you know what you are doing
      LOGGING_LEVEL_CH_ADMIN_BIT_EID: DEBUG
      SWIYU_STATUS_REGISTRY_AUTH_ENABLE_REFRESH_TOKEN_FLOW: true

      POSTGRES_JDBC: "jdbc:postgresql://issuer-db:5432/issuer_db"
      POSTGRES_USER: "issuer_mgmt_user"
      POSTGRES_PASSWORD: "secret"
      POSTGRES_DB: issuer_db

  eidch-issuer-agent-oid4vci:
    image: eidch-issuer-agent-oidc4vci
    build:
      context: .
      dockerfile: ./Docker/eidch-issuer-agent-oid4vci/Dockerfile
    ports:
      - '8081:8080'
    depends_on:
      - postgres-issuer
    environment:
      POSTGRES_JDBC: "jdbc:postgresql://issuer-db:5432/issuer_db"
      POSTGRES_USER: "oid4vci_user"
      POSTGRES_PASSWORD: "secret"
      POSTGRES_DB: issuer_db
      EXTERNAL_URL: "https://<external url of this service>"
      ISSUER_ID: "<Your ISSUER_ID>" #e.g did:tdw:QmejrSkusQgeM6FfA23L6NPoLy3N8aaiV6X5Ysvb47WSj8:identifier-reg-r.trust-infra.swiyu.admin.ch:api:v1:did:ff8eb859-6996-4e51-a976-be1ca584c124
      DID_SDJWT_VERIFICATION_METHOD: "<Your ISSUER_ID>#assert-key-01"
      SDJWT_KEY: |
        -----BEGIN EC PRIVATE KEY-----
        <private key of the file "assert-key-01">
        -----END EC PRIVATE KEY-----
      # Default settings for the application. Only change these if you know what you are doing
      OPENID_CONFIG_FILE: "classpath:openid.json"
      METADATA_CONFIG_FILE: "file:/cfg-files/issuer_metadata.json"
      TOKEN_TTL: 600

volumes:
  postgres_kloak_data:
    driver: local
  postgres_registry_data:
    driver: local
  postgres_issuer_data:
    driver: local