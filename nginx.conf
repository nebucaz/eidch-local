worker_processes 1;

events { worker_connections 1024; }

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;

    server {
        listen 80;
        server_name authoring-base-registry.home.rwpz.net;

        # rewrite swiyu url
        location ~ ^/api/v1/identifier/business-entities/[^/]+/identifier-entries(?:/(.*))?/?$ {

            set $new_uri "";
            # Check if the method is PUT
            if ($request_method = PUT) {
                set $new_uri "/api/v1/did/$1/did.jsonl" ;

                # Rewrite for PUT requests specifically
                #rewrite ^/api/v1/identifier/business-entities/[^/]+/identifier-list-entries/?(.*)$ /api/v1/did/$1/did.jsonl break;
                #rewrite ^/api/v1/identifier/business-entities/[^/]+/identifier-list-entries/?(.*)$ $new_uri break;
            }

            if ($request_method = GET) {
                set $new_uri "/api/v1/entry/$1";
            }

            if ($request_method = PATCH) {
                set $new_uri "/api/v1/entry/$1";
            }

            if ($request_method = POST) {
                #rewrite ^/api/v1/identifier/business-entities/[^/]+/identifier-entries/?(.*)$ /api/v1/entry/$1 break;
                set $new_uri "/api/v1/entry/$1";
            }

            rewrite ^/api/v1/identifier/business-entities/[^/]+/identifier-entries(?:/(.*))?/?$ $new_uri break;

            # Log rewritten URI for debugging (logs rewritten URI before passing)
            add_header X-Rewritten-URI $new_uri always;

            proxy_pass http://eidch-registry-base-authoring:8180;

            proxy_set_header Host eidch-registry-base-authoring;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

        }

        location / {
            proxy_pass http://eidch-registry-base-authoring:8180;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }

    server {
        listen 80;
        server_name base-registry.home.rwpz.net;

        location / {
            proxy_pass http://eidch-registry-base-data:8190;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location /rpl {
            proxy_pass http://eidch-registry-base-data:8190;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;

            header_filter_by_lua_block { ngx.header.content_length = nil }
            body_filter_by_lua_block {
                local cjson = require "cjson.safe"
                local body = ngx.arg[1]

                if body then
                    new_response = {
                        id = "asdsdf",
                        statusRegistryUrl = "data.files.TokenStatusListJWT.readUri"
                    }
                    body = cjson.encode(new_response)
                    ngx.arg[2] = true
                end
                ngx.arg[1] = body
            }
        }
    }

    server {
        listen 80;
        server_name authoring-status-registry.home.rwpz.net;

        # rewrite swiyu url
        location ~ ^/api/v1/status/business-entities/[^/]+/status-list-entries(?:/(.*))?/?$ {

            if ($request_method = PUT) {
                rewrite ^/api/v1/status/business-entities/[^/]+/status-list-entries(?:/(.*))?/?$ /api/v1/statuslist/$1.jwt break;
            }

            if ($request_method = POST) {
                rewrite ^/api/v1/status/business-entities/[^/]+/status-list-entries(?:/(.*))?/?$ /api/v1/entry/$1 break;
            }

            if ($request_method = GET) {
                rewrite ^/api/v1/status/business-entities/[^/]+/status-list-entries(?:/(.*))?/?$ /api/v1/entry/$1 break;
            }

            proxy_pass http://eidch-registry-status-authoring:8280;
            proxy_set_header Host eidch-registry-status-authoring;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            #proxy_cache      cache;
            #proxy_cache_valid  200 30s;

            #if ($request_method = POST) {

                header_filter_by_lua_block {
                    ngx.header.content_length = nil
                }

                # map the response
                body_filter_by_lua_block {
                    local cjson = require "cjson.safe"

                    ngx.ctx.buffered = (ngx.ctx.buffered or "") .. (ngx.arg[1] or "")

                    if not ngx.arg[2] then
                        ngx.arg[1] = nil  -- suppress output for now
                        return
                    end

                    -- Now we have the full body
                    local body = ngx.ctx.buffered
                    ngx.ctx.buffered = nil  -- clear buffer to avoid reuse

                    -- Decode JSON safely
                    local data, err = cjson.decode(body)
                    if not data then
                        ngx.log(ngx.ERR, "JSON decode error: ", err)
                        ngx.arg[1] = body  -- fallback to original body if decode fails
                        return
                    end

                    new_response = {
                        id = data.id,
                        statusRegistryUrl = data.files.TokenStatusListJWT.readUri
                    }
                    ngx.arg[1] = cjson.encode(new_response):gsub("\\/", "/")
                    return
                }
            #}
        }

        location / {
            proxy_pass http://eidch-registry-status-authoring:8280;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }

    server {
        listen 80;
        server_name status-registry.home.rwpz.net;

        location / {
            proxy_pass http://eidch-registry-status-data:8290;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }

    server {
        listen 80;
        server_name authoring-trust-registry.home.rwpz.net;

        location / {
            proxy_pass http://eidch-registry-trust-authoring:8380;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }

    server {
        listen 80;
        server_name trust-registry.home.rwpz.net;

        location / {
            proxy_pass http://eidch-registry-trust-data:8390;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }

    # server {
    #     listen 80;
    #     server_name issuer-mgmt.home.rwpz.net;

    #     location / {
    #         proxy_pass http://localhost:8080;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #     }
    # }

    # server {
    #     listen 80;
    #     server_name issuer-oid4vci.home.rwpz.net;

    #     location / {
    #         proxy_pass http://localhost:8081;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #     }
    # }
}